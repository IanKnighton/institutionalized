package cmd

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"regexp"
	"strings"
	"time"

	"github.com/IanKnighton/institutionalized/internal/config"
	"github.com/IanKnighton/institutionalized/internal/llm"
	"github.com/spf13/cobra"
)

var commitCmd = &cobra.Command{
	Use:   "commit",
	Short: "Generate and commit changes using AI",
	Long:  `Analyze staged changes and generate a conventional commit message using AI providers (OpenAI/Gemini), then prompt for confirmation.`,
	RunE:  runCommit,
}

func init() {
	rootCmd.AddCommand(commitCmd)
	commitCmd.Flags().Bool("dry-run", false, "Show staged changes without calling API or committing")
}

func runCommit(cmd *cobra.Command, args []string) error {
	// Check if we're in a git repository
	if !isGitRepo() {
		return fmt.Errorf("not in a git repository")
	}

	// Get staged changes
	diff, err := getStagedDiff()
	if err != nil {
		return fmt.Errorf("failed to get staged changes: %w", err)
	}

	if strings.TrimSpace(diff) == "" {
		return fmt.Errorf("no staged changes found. Use 'git add' to stage changes first")
	}

	// Check for dry-run mode
	dryRun, _ := cmd.Flags().GetBool("dry-run")
	if dryRun {
		fmt.Println("Staged changes found:")
		fmt.Println(diff)
		return nil
	}

	// Load configuration
	cfg, err := config.LoadConfig()
	if err != nil {
		return fmt.Errorf("failed to load configuration: %w", err)
	}

	// Setup providers based on configuration and available API keys
	providers, err := setupProviders(cfg)
	if err != nil {
		return fmt.Errorf("failed to setup providers: %w", err)
	}

	if len(providers) == 0 {
		return fmt.Errorf("no LLM providers available. Please set OPENAI_API_KEY, GEMINI_API_KEY, or CLAUDE_API_KEY environment variable")
	}

	fmt.Println("Analyzing staged changes...")

	// Check if emoji should be used (flag overrides config)
	useEmoji, _ := cmd.Flags().GetBool("emoji")

	// Create provider manager with configured delay threshold
	delayThreshold := time.Duration(cfg.Providers.DelayThreshold) * time.Second
	manager := llm.NewProviderManager(providers, delayThreshold)

	// Generate commit message using available providers
	commitMessage, providerUsed, err := manager.GenerateCommitMessage(diff, useEmoji)
	if err != nil {
		return fmt.Errorf("failed to generate commit message: %w", err)
	}

	// Post-process to add emoji if needed and not already present
	if useEmoji {
		commitMessage = addEmojiToCommitMessage(commitMessage)
	}

	// Display the proposed commit message
	fmt.Printf("\nProposed commit message (generated by %s):\n%s\n\n", providerUsed, commitMessage)

	// Ask for user confirmation
	if !askForConfirmation("Do you want to commit with this message?") {
		fmt.Println("Commit cancelled.")
		return nil
	}

	// Commit the changes
	if err := commitChanges(commitMessage); err != nil {
		return fmt.Errorf("failed to commit changes: %w", err)
	}

	fmt.Println("Changes committed successfully!")
	return nil
}

func isGitRepo() bool {
	_, err := exec.Command("git", "rev-parse", "--git-dir").Output()
	return err == nil
}

func getStagedDiff() (string, error) {
	cmd := exec.Command("git", "diff", "--cached")
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}
	return string(output), nil
}

// setupProviders creates LLM providers based on configuration and available API keys
func setupProviders(cfg *config.Config) ([]llm.Provider, error) {
	var providers []llm.Provider

	// Check for available API keys
	openaiKey := os.Getenv("OPENAI_API_KEY")
	geminiKey := os.Getenv("GEMINI_API_KEY")
	claudeKey := os.Getenv("CLAUDE_API_KEY")

	// Create map of available providers
	availableProviders := make(map[string]llm.Provider)

	if openaiKey != "" && cfg.Providers.OpenAI.Enabled {
		availableProviders["openai"] = llm.NewOpenAIProvider(openaiKey)
	}
	if geminiKey != "" && cfg.Providers.Gemini.Enabled {
		availableProviders["gemini"] = llm.NewGeminiProvider(geminiKey)
	}
	if claudeKey != "" && cfg.Providers.Claude.Enabled {
		availableProviders["claude"] = llm.NewClaudeProvider(claudeKey)
	}

	// Add primary provider first if available
	if primary, exists := availableProviders[cfg.Providers.Priority]; exists {
		providers = append(providers, primary)
		delete(availableProviders, cfg.Providers.Priority)
	}

	// Add remaining providers as fallbacks
	for _, provider := range availableProviders {
		providers = append(providers, provider)
	}

	return providers, nil
}

func askForConfirmation(question string) bool {
	fmt.Printf("%s (y/N): ", question)
	reader := bufio.NewReader(os.Stdin)
	response, err := reader.ReadString('\n')
	if err != nil {
		return false
	}
	response = strings.ToLower(strings.TrimSpace(response))
	return response == "y" || response == "yes"
}

func commitChanges(message string) error {
	cmd := exec.Command("git", "commit", "-m", message)
	return cmd.Run()
}

// addEmojiToCommitMessage adds appropriate emoji to commit message if not already present
func addEmojiToCommitMessage(message string) string {
	// Extract the commit type from the message
	re := regexp.MustCompile(`^(\w+)(\(.+\))?:\s*(.*)`)
	matches := re.FindStringSubmatch(message)

	if len(matches) >= 4 {
		commitType := matches[1]
		scope := matches[2] // includes parentheses if present
		description := matches[3]

		// Check if emoji is already present
		if hasEmoji(message) {
			return message
		}

		// Get emoji for commit type
		emoji := config.GetEmojiForCommitType(commitType)
		if emoji != "" {
			return fmt.Sprintf("%s%s%s: %s", emoji, commitType, scope, description)
		}
	}

	return message
}

// hasEmoji checks if the message already contains emoji
func hasEmoji(message string) bool {
	// Simple check for common emoji characters
	emojiRunes := []rune("✨🐛📚💄♻️✅🔧⚡👷🏗️⏪")
	for _, r := range message {
		for _, emoji := range emojiRunes {
			if r == emoji {
				return true
			}
		}
	}
	return false
}
