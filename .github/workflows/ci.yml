name: Continuous Integration

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    test:
        runs-on: ubuntu-latest
        name: "Test and Build"
        steps:
            - name: "Checkout"
              uses: actions/checkout@v5

            - name: "Set up Go"
              uses: actions/setup-go@v5
              with:
                  go-version: "1.24"

            - name: "Run tests"
              run: make check

            - name: "Build binary"
              run: make build

    release-tag:
        runs-on: ubuntu-latest
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        needs: ["test"]
        name: "Create Release Tag"
        outputs:
            RELEASE_TAG: ${{ steps.tag_version.outputs.new_tag }}
        steps:
            - name: "Checkout"
              uses: actions/checkout@v5

            - name: Release Tag
              id: tag_version
              uses: mathieudutour/github-tag-action@v6.2
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}

    create-release:
        name: "Create Release"
        runs-on: ubuntu-latest
        needs: ["release-tag"]
        steps:
            - name: "Checkout"
              uses: "actions/checkout@v5"

            - name: "Set up Go"
              uses: actions/setup-go@v5
              with:
                  go-version: "1.24"

            - name: "Build binaries"
              env:
                  VERSION: ${{ needs.release-tag.outputs.RELEASE_TAG }}
              run: |
                  mkdir -p dist

                  # Build for multiple platforms
                  platforms=(
                    "linux/amd64"
                    "linux/arm64"
                    "darwin/amd64"
                    "darwin/arm64"
                    "windows/amd64"
                  )

                  for platform in "${platforms[@]}"; do
                    IFS='/' read -r GOOS GOARCH <<< "$platform"
                    
                    if [ "$GOOS" = "windows" ]; then
                      BINARY_NAME="institutionalized.exe"
                      ARCHIVE_EXT="zip"
                    else
                      BINARY_NAME="institutionalized"
                      ARCHIVE_EXT="tar.gz"
                    fi
                    
                    # Determine OS name for archive
                    case "$GOOS" in
                      "darwin") OS_NAME="macos" ;;
                      "linux") OS_NAME="linux" ;;
                      "windows") OS_NAME="windows" ;;
                    esac
                    
                    echo "Building for $GOOS/$GOARCH..."
                    
                    MODULE_PATH=$(grep '^module ' go.mod | awk '{print $2}')
                    GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-X ${MODULE_PATH}/cmd.Version=${VERSION}" -o ${BINARY_NAME} .
                    
                    # Create archive
                    ARCHIVE_NAME="institutionalized-${VERSION}-${OS_NAME}-${GOARCH}"
                    
                    if [ "$GOOS" = "windows" ]; then
                      zip "dist/${ARCHIVE_NAME}.zip" ${BINARY_NAME}
                    else
                      tar -czf "dist/${ARCHIVE_NAME}.tar.gz" ${BINARY_NAME}
                    fi
                    
                    # Clean up binary for next iteration
                    rm ${BINARY_NAME}
                  done

                  ls -la dist/

            - name: Create a GitHub release
              uses: ncipollo/release-action@v1
              with:
                  tag: ${{ needs.release-tag.outputs.RELEASE_TAG }}
                  name: Release ${{ needs.release-tag.outputs.RELEASE_TAG }}
                  body: |
                      ## What's Changed

                      Release ${{ needs.release-tag.outputs.RELEASE_TAG }}

                      ## Downloads

                      Choose the appropriate binary for your platform:

                      - **Linux AMD64**: `institutionalized-${{ needs.release-tag.outputs.RELEASE_TAG }}-linux-amd64.tar.gz`
                      - **Linux ARM64**: `institutionalized-${{ needs.release-tag.outputs.RELEASE_TAG }}-linux-arm64.tar.gz`
                      - **macOS AMD64**: `institutionalized-${{ needs.release-tag.outputs.RELEASE_TAG }}-macos-amd64.tar.gz`
                      - **macOS ARM64** (Apple Silicon): `institutionalized-${{ needs.release-tag.outputs.RELEASE_TAG }}-macos-arm64.tar.gz`
                      - **Windows AMD64**: `institutionalized-${{ needs.release-tag.outputs.RELEASE_TAG }}-windows-amd64.zip`

                      ## Installation

                      1. Download the appropriate archive for your platform
                      2. Extract the binary
                      3. Make it executable (Linux/macOS): `chmod +x institutionalized`
                      4. Move to PATH (optional): `mv institutionalized /usr/local/bin/`
                  artifacts: "dist/*"
                  draft: false
                  prerelease: false
